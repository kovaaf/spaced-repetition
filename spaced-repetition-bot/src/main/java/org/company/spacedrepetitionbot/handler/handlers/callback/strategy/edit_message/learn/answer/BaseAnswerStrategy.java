package org.company.spacedrepetitionbot.handler.handlers.callback.strategy.edit_message.learn.answer;

import lombok.extern.slf4j.Slf4j;
import org.company.spacedrepetitionbot.constants.Quality;
import org.company.spacedrepetitionbot.constants.Status;
import org.company.spacedrepetitionbot.exception.SessionCompletedException;
import org.company.spacedrepetitionbot.handler.handlers.callback.Callback;
import org.company.spacedrepetitionbot.handler.handlers.callback.strategy.edit_message.BaseEditCallbackStrategy;
import org.company.spacedrepetitionbot.model.Card;
import org.company.spacedrepetitionbot.model.LearningSession;
import org.company.spacedrepetitionbot.service.MessageStateService;
import org.company.spacedrepetitionbot.service.learning.LearningSessionService;
import org.company.spacedrepetitionbot.utils.KeyboardManager;
import org.company.spacedrepetitionbot.utils.MarkdownEscaper;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.generics.TelegramClient;

@Slf4j
public abstract class BaseAnswerStrategy extends BaseEditCallbackStrategy {
    private final LearningSessionService learningSessionService;
    private final KeyboardManager keyboardManager;

    protected BaseAnswerStrategy(
            TelegramClient telegramClient,
            MessageStateService messageStateService,
            MarkdownEscaper markdownEscaper,
            LearningSessionService learningSessionService,
            KeyboardManager keyboardManager) {
        super(telegramClient, messageStateService, markdownEscaper);
        this.learningSessionService = learningSessionService;
        this.keyboardManager = keyboardManager;
    }

    protected abstract Quality getQuality();

    public abstract Callback getPrefix();

    @Override
    public void executeCallbackQuery(CallbackQuery callbackQuery) {
        try {
            Long cardId = Long.valueOf(getCallbackDataByIndex(callbackQuery.getData(), 1));
            Long sessionId = Long.valueOf(getCallbackDataByIndex(callbackQuery.getData(), 3));

            Card updatedCard = learningSessionService.updateCardWithAnswer(cardId, getQuality());
            if (updatedCard.getStatus() != Status.NEW &&
                    updatedCard.getStatus() != Status.LEARNING &&
                    updatedCard.getStatus() != Status.RELEARNING) {
                learningSessionService.removeCardFromSession(sessionId, cardId);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —Å–µ—Å—Å–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
            int remaining = learningSessionService.getRemainingCardsCount(sessionId);
            if (remaining == 0) {
                // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∫–æ–ª–æ–¥—ã
                handleSessionCompleted(callbackQuery);
                return;
            }

            super.executeCallbackQuery(callbackQuery);
        } catch (Exception  e) {
            log.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {}", e.getMessage());
            sendErrorMessage(callbackQuery.getMessage().getChatId(), "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞");
        }
    }

    @Override
    protected String getMessageText(CallbackQuery callbackQuery) {
        Long sessionId = Long.valueOf(getCallbackDataByIndex(callbackQuery.getData(), 3));

        try {
            int remaining = learningSessionService.getRemainingCardsCount(sessionId);
            if (remaining == 0) {
                return "–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑—É—á–µ–Ω—ã.";
            }
            Card nextCard = learningSessionService.getNextCardInSession(sessionId);
            return String.format("–û—Å—Ç–∞–ª–æ—Å—å –∫–∞—Ä—Ç: %d\n\n–í–æ–ø—Ä–æ—Å:\n%s", remaining, nextCard.getFront());
        } catch (SessionCompletedException e) {
            return e.getMessage();
        }
    }

    @Override
    protected InlineKeyboardMarkup getKeyboard(CallbackQuery callbackQuery) {
        Long deckId = Long.valueOf(getCallbackDataByIndex(callbackQuery.getData(), 2));
        Long sessionId = Long.valueOf(getCallbackDataByIndex(callbackQuery.getData(), 3));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —Å–µ—Å—Å–∏—è
        int remaining = learningSessionService.getRemainingCardsCount(sessionId);
        if (remaining == 0) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤
            LearningSession newSession = learningSessionService.getOrCreateSession(deckId);
            int newCards = learningSessionService.countNewCardsInSession(newSession.getSessionId());
            int reviewCards = learningSessionService.countReviewCardsInSession(newSession.getSessionId());
            return keyboardManager.getDeckMenuKeyboard(deckId, newCards, reviewCards);
        }

        // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç—É
        try {
            Card nextCard = learningSessionService.getNextCardInSession(sessionId);
            Long nextCardId = nextCard.getCardId();
            Status status = nextCard.getStatus();
            return keyboardManager.getLearnDeckKeyboard(nextCardId, deckId, sessionId, status);
        } catch (SessionCompletedException e) {
            // –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∫–∞—Ä—Ç—ã —Å–µ—Å—Å–∏—è —Å—Ç–∞–ª–∞ –ø—É—Å—Ç–æ–π
            LearningSession newSession = learningSessionService.getOrCreateSession(deckId);
            int newCards = learningSessionService.countNewCardsInSession(newSession.getSessionId());
            int reviewCards = learningSessionService.countReviewCardsInSession(newSession.getSessionId());
            return keyboardManager.getDeckMenuKeyboard(deckId, newCards, reviewCards);
        }
    }

    private void handleSessionCompleted(CallbackQuery callbackQuery) {
        Long deckId = Long.valueOf(getCallbackDataByIndex(callbackQuery.getData(), 2));
        Long chatId = callbackQuery.getMessage().getChatId();

        try {
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ–Ω—é –∫–æ–ª–æ–¥—ã
            LearningSession newSession = learningSessionService.getOrCreateSession(deckId);
            int newCards = learningSessionService.countNewCardsInSession(newSession.getSessionId());
            int reviewCards = learningSessionService.countReviewCardsInSession(newSession.getSessionId());

            telegramClient.execute(EditMessageText.builder()
                    .chatId(chatId)
                    .messageId(callbackQuery.getMessage().getMessageId())
                    .text("üéâ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑—É—á–µ–Ω—ã.")
                    .replyMarkup(keyboardManager.getDeckMenuKeyboard(deckId, newCards, reviewCards))
                    .build());
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {}", e.getMessage());
            sendErrorMessage(chatId, "–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏");
        }
    }
}

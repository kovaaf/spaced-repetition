name: Build & Deploy

on:
  push:
    branches:
      - main

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      spaced-repetition-bot: ${{ steps.filter.outputs.spaced-repetition-bot }}
      spaced-repetition-web: ${{ steps.filter.outputs.spaced-repetition-web }}
      docker-compose: ${{ steps.filter.outputs.docker-compose }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          base: ${{ github.ref }}
          filters: |
            spaced-repetition-bot: ['spaced-repetition-bot/**']
            spaced-repetition-web: ['spaced-repetition-web/**']
            docker-compose: ['docker-compose.yml']

  push-docker-compose-to-remote-server:
    name: Push docker-compose.yaml to remote server
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: ${{ needs.detect-changes.outputs.docker-compose == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Copy docker-compose.yml to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: "github-spaced-repetition"
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: "docker-compose.yml"
          target: "/home/github-spaced-repetition"

  build-and-push-images-to-dockerhub:
    name: Build and Push Images to DockerHub
    runs-on: ubuntu-latest
    needs: [detect-changes]
    steps:
      - uses: actions/checkout@v4
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Push Bot Image
        if: ${{ needs.detect-changes.outputs.spaced-repetition-bot == 'true' }}
        uses: docker/build-push-action@v3
        with:
          context: ./spaced-repetition-bot
          push: true
          tags: ouidockeruser/spaced-repetition-bot:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Push Web Image
        if: ${{ needs.detect-changes.outputs.spaced-repetition-web == 'true' }}
        uses: docker/build-push-action@v3
        with:
          context: ./spaced-repetition-web
          push: true
          tags: ouidockeruser/spaced-repetition-web:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to remote server
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-push-images-to-dockerhub, push-docker-compose-to-remote-server]
    if: |
      needs.detect-changes.outputs.spaced-repetition-bot == 'true' ||
      needs.detect-changes.outputs.spaced-repetition-web == 'true' ||
      needs.detect-changes.outputs.docker-compose == 'true'
    steps:
      - name: Create .env file
        run: |
          cat << EOF > .env
          TELEGRAM_BOT_DB_USER=${{ secrets.TELEGRAM_BOT_DB_USER }}
          TELEGRAM_BOT_DB_PASSWORD=${{ secrets.TELEGRAM_BOT_DB_PASSWORD }}
          TELEGRAM_BOT_PORT=${{ secrets.TELEGRAM_BOT_PORT }}
          TELEGRAM_BOT_NAME=SpacedRepetitionBot
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_BOT_CREATOR_ID=${{ secrets.TELEGRAM_BOT_CREATOR_ID }}
          USER_HOME=${{ secrets.USER_HOME }}
          GIT_SSH_PASSPHRASE=${{ secrets.GIT_SSH_PASSPHRASE }}
          GITHUB_WEBHOOK_SECRET=${{ secrets.GITHUB_WEBHOOK_SECRET }}
          GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          ENCRYPTION_PASSWORD=${{ secrets.ENCRYPTION_PASSWORD }}
          ENCRYPTION_SALT=${{ secrets.ENCRYPTION_SALT }}
          EOF

          # Защищаем файл перед отправкой
          chmod 600 .env

      - name: Copy .env to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: "github-spaced-repetition"
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: ".env"
          target: "/home/github-spaced-repetition"

      - name: Deploy Application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: "github-spaced-repetition"
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e  # Немедленный выход при ошибке
            trap 'rm -f .env' EXIT  # Гарантированное удаление .env при выходе
            
            # Обновляем только измененные сервисы
            if [ '${{ needs.detect-changes.outputs.docker-compose }}' = 'true' ]; then
              # При изменении compose перезапускаем весь стек
              echo "Full stack update"
              sudo docker compose down
              sudo docker compose pull --quiet
              sudo docker compose up -d --force-recreate --remove-orphans
            else
              echo "Partial update"
              services_to_update=()
              [ '${{ needs.detect-changes.outputs.spaced-repetition-bot }}' = 'true' ] && services_to_update+=("spaced-repetition-bot")
              [ '${{ needs.detect-changes.outputs.spaced-repetition-web }}' = 'true' ] && services_to_update+=("spaced-repetition-web")
            
              for service in "${services_to_update[@]}"; do
                echo "Updating $service"
                sudo docker compose pull --quiet $service
                sudo docker compose up -d --no-deps --force-recreate --remove-orphans $service
              done
            fi
            
            echo "Current containers:"
            sudo docker ps -a
            
            echo "Cleaning project images..."
            sudo docker image prune -a -f --filter "reference=ouidockeruser/*"  # удалить все неиспользуемые образы
            
      - name: Clean local .env
        run: rm -f .env